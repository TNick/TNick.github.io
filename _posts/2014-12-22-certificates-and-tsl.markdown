---
layout: post
title:  "Certificates and TSL"
date:   2014-12-22 22:03:00
categories: walkthrough
---

Overview
========

Some general purpose information about the creation and use of certificates
with [TSL](http://en.wikipedia.org/wiki/Transport_Layer_Security).

> Transport Layer Security (TLS) and its predecessor, Secure Sockets Layer (SSL), 
> are cryptographic protocols designed to provide communication security.
> They use X.509 certificates and hence asymmetric cryptography to 
> authenticate the counterparty with whom they are communicating,
> and to exchange a symmetric key.


Software Resources
==================

[XCA](http://xca.sourceforge.net/) is a graphical user interface
program that can be used to manage the certificates. It
is open source and hosted at [SourceForge](http://sourceforge.net/projects/xca/).

Internally, [XCA](http://xca.sourceforge.net/) relies on
[OpenSSL](https://www.openssl.org/) - a collaborative 
effort to develop a robust, commercial-grade,
full-featured, and Open Source toolkit implementing 
the Secure Sockets Layer (SSL v2/v3) and Transport Layer
Security (TLS) protocols as well as a full-strength 
general purpose cryptography library. .

[OpenSSH](http://www.openssh.com/) is a FREE version of the 
SSH connectivity tools developed by the 
[OpenBSD Project](http://www.openbsd.org/).


Creating Certificates 
=====================

Keys
----

First, a private key for the certificate needs to be created.
Keys are the basis of public key algorithms and PKI.  Keys usually
come in pairs, with one half being the public key and the other half
being the private key.  With OpenSSL, the private key contains the
public key information as well, so a public key doesn't need to be
generated separately.

Private key with a password:

    openssl genrsa -des3 -out privkey.pem 4096


Private key without a password:

    openssl genrsa -out privkey.pem 4096

See [the HowTo](https://www.openssl.org/docs/HOWTO/keys.txt) for how to create a DSA key (for signing only).


Common Name
-----------

The important part in the questions asked by openssl is the *Common Name* (CN).
> You’ll want to answer with the hostname or CNAME by which people will address the server. 
> This is very important. If your web server’s real hostname is mybox.mydomain.com 
> but people will be using www.mydomain.com to address the box, then use the latter 
> name to answer the *Common Name* question.


Creating a Test Certificate 
---------------------------

    openssl req -new -x509 -key privkey.pem -out cacert.pem -days 365 

- **privkey.pem** is the key created in a previous step;
- **cacert.pem** is the certificate file that will be generated;


Testing the certificate is as easy as:

    openssl s_server -cert cacert.pem -key privkey.pem -www

Then, if it does not fail, go to [https://localhost:4433/](https://localhost:4433/).

Creating a Certificate Request 
------------------------------

    openssl req -new -key privkey.pem -out cert.csr

- **privkey.pem** is the key created in a previous step;
- **cert.csr** is the request file that will be generated;


File Types
==========

- **.csr** file is a certificate signing request which initiates 
your certificate request with a certificate provider and 
contains administrative information about your organization;
- **.key** file is the private key used to encrypt your 
site’s SSL-enabled requests;
- **.pem** files are base64 ASCII encoded files that contain both the certificate and key;
- **.crt** files are base64 ASCII encoded files that only contain the certificate;
- **.pfx** is used on Windows servers for files containing both the public 
key files (your SSL certificate files, provided by for instance DigiCert)
and the associated private key (generated by your server at the time the CSR was generated).

Converting to a .pfx file can be done using following command:

    openssl pkcs12 -export -out outputfile.pfx -inkey privkey.pem -in cacert.pem
    openssl pkcs12 -export -out outputfile.pfx -inkey privkey.pem -in cacert.pem -certfile authority_ca.crt

Where:

- **outputfile.pfx** is the file that will be generated;
- **privkey.pem** is the private key;
- **cacert.pem** is base64 ASCII encoded certificate;
- **authority_ca.crt** is your certificate if you are a certification authority


Resources
=========

- [Convert from CRT to PFX with openssl](http://msandbu.wordpress.com/2012/10/15/convert-from-crt-to-pfx-with-openssl/)
- [XCA](http://xca.sourceforge.net/)
- [OpenSSL](https://www.openssl.org/)
	- [Certificates - HowTo](https://www.openssl.org/docs/HOWTO/certificates.txt)
	- [Keys - HowTo](https://www.openssl.org/docs/HOWTO/keys.txt)
	- [Proxy Certificates - HowTo](https://www.openssl.org/docs/HOWTO/proxy_certificates.txt)
- [OpenSSH](http://www.openssh.com/)
- [OpenBSD Project](http://www.openbsd.org/)
- [Apache specific](http://www.akadia.com/services/ssh_test_certificate.html)
- [Internet Information Services (IIS) 6.0 Resource Kit Tools](http://www.microsoft.com/en-us/download/details.aspx?id=17275) (Windows specific)
- [OpenSSL Command-Line HOWTO](https://www.madboa.com/geek/openssl/)